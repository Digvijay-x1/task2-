generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement())
  name           String
  email          String     @unique
  password       String
  location       String?
  contactInfo    String?
  profilePicture String?
  role           Role       @default(Buyer)
  cartItems      CartItem[]
  products       Product[]
  favorites      Favorite[]
  orders         Order[] // Orders placed by user
  soldOrders     Order[]    @relation("SellerOrders") // Orders for products sold by this user
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id           Int       @id @default(autoincrement())
  sku          String    @unique // Generated using ASSIGNMENT_SEED checksum
  name         String
  description  String?
  price        Float
  condition    Condition @default(Used)
  availability Boolean   @default(true)
  quantity     Int       @default(1)

  // Relationships
  seller     User     @relation(fields: [sellerId], references: [id])
  sellerId   Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  images     ProductImage[]
  cartItems  CartItem[]
  favorites  Favorite[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([sellerId])
  @@index([availability])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  altText   String?
  isPrimary Boolean @default(false)

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  createdAt DateTime @default(now())

  @@index([productId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // Prevent duplicate cart items
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // Prevent duplicate favorites
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique
  status      OrderStatus @default(Pending)
  subtotal    Float
  platformFee Float // Calculated using ASSIGNMENT_SEED
  total       Float

  // Buyer information
  buyer   User @relation(fields: [buyerId], references: [id])
  buyerId Int

  // Seller information (for single-seller orders)
  seller   User? @relation("SellerOrders", fields: [sellerId], references: [id])
  sellerId Int?

  // Shipping information
  shippingAddress String

  // Order items
  orderItems OrderItem[]

  // Payment and processing
  idempotencyKey String? @unique
  hmacSignature  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([buyerId])
  @@index([sellerId])
  @@index([status])
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  quantity Int
  price    Float // Price at time of order

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
}

enum Role {
  Buyer
  Seller
  Admin
}

enum Condition {
  New
  LikeNew
  Good
  Fair
  Poor
  Used
}

enum OrderStatus {
  Pending
  Confirmed
  Shipped
  Delivered
  Cancelled
  Refunded
}
